[gd_scene load_steps=15 format=2]

[ext_resource path="res://delta!.gd" type="Script" id=1]
[ext_resource path="res://floorGraphics.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type particles;

uniform vec4 box;
uniform float speed;
uniform sampler2D color;

float random(vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) *
            43758.5453123);
}

void vertex()
{
	vec2 pos = TRANSFORM[3].xy;
	float _random = random(pos);
	COLOR = texture(color,vec2(abs(pos.x / 1024f),abs(pos.y/600f)));
	if (CUSTOM.x == 0.0)
	{	
		//TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		
	CUSTOM.x = _random * 2.0 * 3.14159;// angle(TRANSFORM[3].xy ,pos );

		
		
	}
	
	_random = random(pos);
	
	//CUSTOM.x = random * 2.0 * 3.1415;
	//CUSTOM.x = -45.0;
	vec2 dir = vec2(cos(CUSTOM.x),sin(CUSTOM.x));
	vec2 newPos = pos + dir * speed * DELTA; 
	
	if (newPos.x < box.x)
	{
		_random = random(vec2(_random));
		newPos.x = pos.x;
		CUSTOM.x = _random * 2.0 * 3.1415;
	}
	else if (newPos.x > box.y)
	{
		_random = random(vec2(_random));
		newPos.x = pos.x;
		CUSTOM.x = _random * 2.0 * 3.1415;
	}
	if (newPos.y < box.z)
	{
		_random = random(vec2(_random));
		newPos.y = pos.y;
		CUSTOM.x = _random * 2.0 * 3.1415;
	}
	else if (newPos.y > box.w)
	{
		_random = random(vec2(_random));
		newPos.y = pos.y;
		CUSTOM.x = _random * 2.0 * 3.1415;
	}
	
	/*if (newPos.x < 0.0 || newPos.x >= width || newPos.y < 0.0 || newPos.y >= height) {
		newPos.x = min(width-1.0,max(0.0, newPos.x));
		newPos.y = min(height-1.0,max(0.0, newPos.y));
		//CUSTOM.x = -45.0;//random * 2.0 * 3.1415;
		}
		*/
	VELOCITY.xy = newPos - pos;
}"

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0, 0.758242, 1 )
colors = PoolColorArray( 0.0570374, 0.0615781, 0.347656, 1, 0.349591, 0.0211487, 0.386719, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 3 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/box = Plane( -512, 512, -300, 300 )
shader_param/speed = 10000.0
shader_param/color = SubResource( 4 )

[sub_resource type="OpenSimplexNoise" id=15]

[sub_resource type="NoiseTexture" id=16]
width = 10
height = 10
noise = SubResource( 15 )

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;

uniform sampler2D last;
uniform float evaporate_speed;
uniform float width = 1024;
uniform float height = 600;
uniform float diffuseRate;
uniform float decayRate;
uniform int avg_iterations = 1;
uniform float DELTA;

float saturate(float input)
{
	if (input > 1f)
	{
		return 1f;
	}
	else if(input < 0f)
	{
		return 0f;
	}
	else
	{
		return input;
	}
}

vec4 Diffuse (vec4 originalCol,vec2 uv )
{

	vec4 sum = vec4(0f);
	// 3x3 blur
	for (int offsetX = -avg_iterations; offsetX <= avg_iterations; offsetX ++) {
		for (int offsetY = -avg_iterations; offsetY <= avg_iterations; offsetY ++) {
			float sampleX = min(width, max(0f, uv.x + float(offsetX)/width));
			float sampleY = min(height, max(0f, uv.y + float(offsetY)/height));
			sum += texture(last,vec2(sampleX,sampleY));
		}
	}

	vec4 blurredCol = sum / float((avg_iterations * 2 + 1) * (avg_iterations*2 + 1));
	float diffuseWeight = saturate(diffuseRate * DELTA);
	blurredCol = originalCol * (1f - diffuseWeight) + blurredCol * (diffuseWeight);

	//DiffusedTrailMap[id.xy] = blurredCol * saturate(1 - decayRate * deltaTime);
	return max(vec4(0f), blurredCol - decayRate * DELTA);
}
void fragment()
{
	vec4 original_value = texture(last,UV);
	vec4 evaporated_value = max(vec4(0f),original_value - vec4(evaporate_speed) * DELTA);
	//COLOR.rgb = evaporated_value;
	//COLOR = blur(UV,TEXTURE_PIXEL_SIZE);
	COLOR = Diffuse(original_value,UV);
}"

[sub_resource type="ViewportTexture" id=10]
viewport_path = NodePath("Viewport")

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 8 )
shader_param/evaporate_speed = 0.376
shader_param/width = 1024.0
shader_param/height = 600.0
shader_param/diffuseRate = 50.0
shader_param/decayRate = 1.766
shader_param/avg_iterations = 20
shader_param/DELTA = 0.015855
shader_param/last = SubResource( 10 )

[sub_resource type="ViewportTexture" id=7]
viewport_path = NodePath("Viewport")

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

uniform float blur_amount : hint_range(0, 5);

void fragment() {
	COLOR = textureLod(SCREEN_TEXTURE, SCREEN_UV, blur_amount);
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/blur_amount = 1

[node name="Node2D" type="Node2D"]

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 1024, 600 )
fxaa = true
render_target_v_flip = true
render_target_clear_mode = 2
render_target_update_mode = 3

[node name="Particles2D" type="Particles2D" parent="Viewport"]
position = Vector2( 512, 300 )
amount = 20000
lifetime = 20.0
preprocess = 20.0
process_material = SubResource( 2 )
texture = SubResource( 16 )
script = ExtResource( 2 )
highdef = true

[node name="ColorRect" type="ColorRect" parent="Viewport"]
material = SubResource( 9 )
margin_right = 1024.0
margin_bottom = 600.0
script = ExtResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( -1, 1 )
scale = Vector2( 0.5, 0.9 )
texture = SubResource( 7 )

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ColorRect" type="ColorRect" parent="Control"]
material = SubResource( 14 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 1024.0
margin_bottom = 600.0

[node name="Polygon2D" type="Polygon2D" parent="."]
position = Vector2( -512, -420 )
color = Color( 0, 0, 0, 1 )
invert_enable = true
polygon = PoolVector2Array( 400, 223, 600, 223, 700, 327, 700, 523, 600, 620, 400, 620, 300, 523, 300, 341 )

[node name="Camera2D" type="Camera2D" parent="."]
current = true
