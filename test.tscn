[gd_scene load_steps=11 format=2]

[ext_resource path="res://Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://projectiles.gd" type="Script" id=2]
[ext_resource path="res://diffuse.gdshader" type="Shader" id=3]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 4.5, 508 )

[sub_resource type="Shader" id=10]
code = "shader_type particles;

uniform float speed;
uniform vec4 color_1 : hint_color;
uniform vec4 color_2 : hint_color;
uniform vec4 color_3 : hint_color;
uniform vec4 color_4 : hint_color;
uniform float sensorOffsetDst;
uniform int sensorSize;
uniform float sensorAngleSpacing;
uniform sampler2D last;
uniform float turnSpeed;
uniform float turnStrength;
uniform vec2 bezier_curve_point;
uniform vec2 bezier_control_point;
uniform vec2 bezier_control2_point;
uniform vec2 start_point;
uniform vec3 species_odds;
uniform float spawn_angle_base;
uniform float spawn_angle_clamp;

float random(vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) *
            43758.5453123);
}

vec2 toBezier(float t, vec2 P0, vec2 P1, vec2 P2, vec2 P3)
{
    float t2 = t * t;
    float one_minus_t = 1.0 - t;
    float one_minus_t2 = one_minus_t * one_minus_t;
    return (P0 * one_minus_t2 * one_minus_t + P1 * 3.0 * t * one_minus_t2 + P2 * 3.0 * t2 * one_minus_t + P3 * t2 * t);
}

float sense(float sensorAngleOffset,vec4 cus,mat4 trans) {
	float sensorAngle = cus.x + sensorAngleOffset;
	vec2 sensorDir = vec2(cos(sensorAngle), sin(sensorAngle));
	vec2 sensorCenter = trans[3].xy + sensorDir * sensorOffsetDst;
	//sensorCenter /= vec2(1024,600);
	float sum = 0f;
	for (int offsetX = -sensorSize; offsetX <= sensorSize; offsetX ++) {
		for (int offsetY = -sensorSize; offsetY <= sensorSize; offsetY ++) {
			float sampleX = sensorCenter.x + float(offsetX);
			float sampleY = sensorCenter.y + float(offsetY);
			vec4 res = texture(last,vec2(sampleX,sampleY));
			if (res == color_1)
			{
				sum+=1f;
			}
		}
	}

	return sum;
}
void vertex()
{
	vec2 pos = TRANSFORM[3].xy;
	if (RESTART)
	{
		TRANSFORM[3].xy = start_point * vec2(1024,600);
		CUSTOM.x = 1f;
		CUSTOM.y = spawn_angle_base + clamp(random(vec2(float(INDEX))) * 2f * 3.14159,-spawn_angle_clamp,spawn_angle_clamp);
		CUSTOM.z= 1f;
	}
	else if(CUSTOM.z == 1f)
	{
		CUSTOM.x = 0f;
		float noise = random(pos);
		if(noise < species_odds.x)
		{
			CUSTOM.x = 1f;
			COLOR = color_1;
		}
		else if (noise < species_odds.y)
		{
			CUSTOM.x = 2f;
			COLOR = color_2;
		}
		else if(noise < species_odds.z)
		{
			CUSTOM.x = 3f;
			COLOR = color_3;
		}
		else
		{
			CUSTOM.x = 4f;
			COLOR = color_4;
		}
		
		CUSTOM.z = 2f;
	}
	if (CUSTOM.x == 1f)
	{
		VELOCITY.xy = vec2(cos(CUSTOM.y),sin(CUSTOM.y)) * speed;
	}
	if (CUSTOM.x == 2f)
	{
	float weightForward = sense(0f,CUSTOM,TRANSFORM);
	float weightLeft = sense(sensorAngleSpacing,CUSTOM,TRANSFORM);
	float weightRight = sense(-sensorAngleSpacing,CUSTOM,TRANSFORM);
	
	float randomSteerStrength = random(pos);
	//continue
	if(weightForward > weightLeft && weightForward > weightRight)
	{
		CUSTOM.y += 0f;
	}
	//random
	else if (weightForward < weightLeft && weightForward < weightRight)
	{
		CUSTOM.y += (randomSteerStrength - 0.5) * 2f * turnSpeed * DELTA * turnStrength;
	}
	//turn right
	else if (weightRight > weightLeft)
	{
		CUSTOM.y += randomSteerStrength * turnSpeed * DELTA * turnStrength;
	}
	//turn left
	else if (weightLeft > weightRight)
	{
		CUSTOM.x -= randomSteerStrength * turnSpeed * DELTA * turnStrength;
	}
		VELOCITY.xy = vec2(cos(CUSTOM.y),sin(CUSTOM.y)) * speed * (.75f + ((weightForward + weightLeft + weightRight)/60000f));
	}
	else if(CUSTOM.x == 3f)
	{
		CUSTOM.w += 0.01f;
		//CUSTOM.w = clamp(CUSTOM.w,0f,1f);
		vec2 newPos = toBezier(CUSTOM.w,start_point,bezier_control_point,bezier_control2_point,bezier_curve_point);
		VELOCITY.xy = pos - newPos;
	}
	
}"

[sub_resource type="ViewportTexture" id=11]
viewport_path = NodePath("Viewport")

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 10 )
shader_param/speed = 320.0
shader_param/color_1 = Color( 1, 0, 0, 1 )
shader_param/color_2 = Color( 0, 1, 0.27451, 1 )
shader_param/color_3 = Color( 0.0784314, 0, 1, 1 )
shader_param/color_4 = Color( 1, 0, 0.819608, 1 )
shader_param/sensorOffsetDst = 10.0
shader_param/sensorSize = 90
shader_param/sensorAngleSpacing = 45.0
shader_param/turnSpeed = 800.0
shader_param/turnStrength = 800.0
shader_param/bezier_curve_point = Vector2( 0.647461, 0.503333 )
shader_param/bezier_control_point = Vector2( 0.524414, 0.44 )
shader_param/bezier_control2_point = Vector2( 0.746094, 0.483333 )
shader_param/start_point = Vector2( 0.0986328, 0.355 )
shader_param/species_odds = Vector3( 1, 0, 0 )
shader_param/spawn_angle_base = 6.579
shader_param/spawn_angle_clamp = 0.0
shader_param/last = SubResource( 11 )

[sub_resource type="ViewportTexture" id=7]
viewport_path = NodePath("Viewport")

[sub_resource type="ShaderMaterial" id=8]
resource_local_to_scene = true
shader = ExtResource( 3 )
shader_param/search_depth = 6
shader_param/diffuseRate = 2.0
shader_param/decayRate = 0.202
shader_param/frame = SubResource( 7 )

[sub_resource type="ViewportTexture" id=9]
viewport_path = NodePath("Viewport")

[node name="test" type="Node2D"]

[node name="StaticBody2D" type="StaticBody2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 0, 300 )
shape = SubResource( 1 )

[node name="CollisionShape2D2" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 1024, 300 )
shape = SubResource( 1 )

[node name="CollisionShape2D3" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 512, 600 )
rotation = 1.5708
shape = SubResource( 1 )

[node name="CollisionShape2D4" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 512, 0 )
rotation = 1.5708
shape = SubResource( 1 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 1024, 600 )
render_target_v_flip = true

[node name="ColorRect" type="ColorRect" parent="Viewport"]
visible = false
margin_right = 1024.0
margin_bottom = 600.0
color = Color( 0, 0, 0, 1 )

[node name="Particles2D" type="Particles2D" parent="Viewport"]
position = Vector2( 101, 213 )
emitting = false
amount = 80000
lifetime = 20.0
randomness = 1.0
local_coords = false
process_material = SubResource( 4 )
script = ExtResource( 2 )
startpath = "Player"

[node name="Player" parent="." instance=ExtResource( 1 )]
position = Vector2( 101, 213 )

[node name="Timer" type="Timer" parent="Player"]

[node name="Timer2" type="Timer" parent="Player"]

[node name="End" type="Position2D" parent="."]
position = Vector2( 663, 302 )

[node name="Control" type="Position2D" parent="."]
position = Vector2( 537, 264 )

[node name="Control2" type="Position2D" parent="."]
position = Vector2( 764, 290 )

[node name="Start" type="Position2D" parent="."]
position = Vector2( 512, 300 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 8 )
position = Vector2( 512, 300 )
texture = SubResource( 9 )

[connection signal="timeout" from="Player/Timer" to="Player" method="_on_Timer_timeout"]
[connection signal="timeout" from="Player/Timer2" to="Player" method="_on_Timer2_timeout"]
